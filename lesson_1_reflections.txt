How did viewing a diff between two versions of a file help you see
the bug that was introduced?
	Executing a command:
		diff -u [old_version] [new_version]
	will show the old and new version of every line that has changed
	between the versions.
	If the files are big this helps to see a bug.

How could having easy access to the entire history of a file make you
a more efficient programmer in the long term?
	If something breaks because of some change made to the file I can
	easily go back and see what caused an error.

What do you think are the pros and cons of manually choosing when to
create a commit, like you do in Git, vs having versions automatically
saved, like Google Docs does?
	Pros:
	+	you can commit when there's a logical change, so that the
	commited version is working
	+	changes can be commited with a note saying what was changed
	Cons:
	-	committing is user-reliable, so I can forget to commit or
	commit too big or too small change

Why do you think some version control systems, like Git, allow saving
multiple files in one commit, while others, like Google Docs, treat
each file separately?
	Git allows saving multiple files in one commit, so that I can see
	which versions of other files were the latest when the commit was
	made.

How can you use commands git log and git diff to view the history of
files?
	If I execute the command git log the output will be recent
	commits listed with their ID's, author names, dates and comments.
	I can use git diff with two commit ID's to see the differences
	between the two versions.

How might using version control make you more confident to make
changes that could break something?
	I can always go back and see which commit was the first to
	introduce the bug.

Now that you have your workspace set up, what do you want to try
using Git for?
	I want to try using Git to create Android applications.

